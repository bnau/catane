import * as mongoose from 'mongoose';
import {Schema} from 'mongoose';
import * as Promise from 'bluebird';
import { {{upperName}}Repository } from '../{{fileName}}';

export interface I{{upperName}}Model extends mongoose.Document {
{{#fieldsLessId}}
    {{name}}: {{type}};
{{/fieldsLessId}}
}

export let {{fileName}}Schema: Schema = new Schema({
{{#fieldsLessId}}
	{{name}}: {
		type: String,
		required: {{required}}
	},
{{/fieldsLessId}}
});

export class {{upperName}}ModelGen {

	protected _{{fileName}}Model: I{{upperName}}Model;

	static create{{upperName}}(data: Object): PromiseLike<I{{upperName}}Model> {
		let p = new Promise((resolve, reject) => {

			let repo = new {{upperName}}Repository();

			let {{fileName}} = <I{{upperName}}Model>{
				...data
			};

			return repo.create({{fileName}}, (err, res) => {
				if (err) {
					reject(err);
				} else {
					resolve(res);
				}
			});

		});

		return p;

	}

	static find{{upperName}}ById(id: string): PromiseLike<I{{upperName}}Model> {
		let p = new Promise((resolve, reject) => {
			let repo = new {{upperName}}Repository();

			repo.findById(id, (err, res) => {
				if (err) {
					reject(err);
				} else {
					resolve(res);
				}
			});
		});

		return p;
	}

	static update(id: string, fields: Object): PromiseLike<I{{upperName}}Model> {
		let p = new Promise((resolve, reject) => {

			let repo = new {{upperName}}Repository();

			let {{fileName}} = <I{{upperName}}Model>{
				...fields
			};

			repo.update(new mongoose.Types.ObjectId(id), {{fileName}}, (err, res) => {
				if (err) {
					reject(err);
				} else {
					resolve(res);
				}
			});

		});

		return p;
	}

	static delete(id: string): PromiseLike<I{{upperName}}Model> {
		let p = new Promise((resolve, reject) => {

			let repo = new {{upperName}}Repository();

			repo.delete(id, (err, res) => {
				if (err) {
					reject(err);
				} else {
					resolve(res);
				}
			});

		});

		return p;
	}

	static all(): PromiseLike<I{{upperName}}Model[]> {
		let p = new Promise((resolve, reject) => {

			let repo = new {{upperName}}Repository();

			repo.find({}, {}, (err, res) => {
				if (err) {
					console.log(err);
					reject(err);
				} else {
					resolve(res);
				}
			});

		});

		return p;
	}

	get name(): string {
		return this._{{fileName}}Model.name;
	}

	constructor({{fileName}}Model: I{{upperName}}Model) {
		this._{{fileName}}Model = {{fileName}}Model;
	}

}
